app: serverless-file-sharing-app
service: serverless-file-sharing-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    FILE_SHARING_TABLE: File-Sharing-${self:provider.stage}
    FILE_SHARING_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-file-sharing-${self:provider.stage}-proch
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

custom:
  serverless-offline:
    useChildProcesses: true
    httpPort: 3003
    allowCache: false

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Udacity Capstone Project API
        description: Serverless application for capstone project
    models:
      - name: FileSharingRequest
        contentType: application/json
        schema: ${file(models/create-file-model.json)}
      - name: FileSharingUpdate
        contentType: application/json
        schema: ${file(models/update-file-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetFiles:
    handler: src/lambda/http/getFiles.handler
    events:
      - http:
          method: get
          path: files
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}/index/${self:provider.environment.FILE_SHARING_CREATED_AT_INDEX}

  GetFilesById:
    handler: src/lambda/http/getFileById.handler
    events:
      - http:
          method: get
          path: files/{fileId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}/index/${self:provider.environment.FILE_SHARING_CREATED_AT_INDEX}

  CreateFile:
    handler: src/lambda/http/createFile.handler
    events:
      - http:
          method: post
          path: files
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-file-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}

  UpdateFile:
    handler: src/lambda/http/updateFile.handler
    events:
      - http:
          method: patch
          path: files/{fileId}
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-file-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}

  DeleteFile:
    handler: src/lambda/http/deleteFile.handler
    events:
      - http:
          method: delete
          path: files/{fileId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: files/{fileId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILE_SHARING_TABLE}

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    FilesSharingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FILE_SHARING_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FILE_SHARING_CREATED_AT_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
            Id: MyPolicy
            Version: "2012-10-17"
            Statement:
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*'
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
